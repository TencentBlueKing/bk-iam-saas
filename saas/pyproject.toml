[tool.black]
line-length = 119
target-version = ['py36']
exclude = '''
(
  /(
      \.mypy_cache
    | \.git
    | migrations
  )/
)
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = 'true'
force_grid_wrap = 0
use_parentheses = 'true'
line_length = 119
skip = [".mypy_cache", ".git", "*/migrations"]

[tool.flake8]
ignore = "C901,E203,W503,B010,B009"
max-line-length=119
max-complexity=12
format = "pylint"
show_source = "true"
statistics = "true"
count = "true"
exclude = "*migrations*,*.pyc,.git,__pycache__,node_modules/*,*/templates_module*,*/bin/*,*/settings/*,config,tests/unittest_settings.py"

[tool.bandit]
exclude_dirs = ["tests"]
tests = []
skips = ["B101", "B110", "B311", "B303"]

[tool.mypy]
files=["."]
python_version = 3.6
ignore_missing_imports=true
follow_imports="skip"
strict_optional=true
pretty=true
show_error_codes=true
exclude='''(?x)(
    ^.*/config/.*|
    .*/settings\.py|
    .*/tests/unittest_settings\.py|
    .*/backend/tracing/.*
)'''

[[tool.mypy.overrides]]
module = [
    "*.migrations.*",
    "*.config.*",
    "*.tests.unittest_settings",
    "*.backend.tracing.*",
    "*.settings"
]
ignore_errors = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.unittest_settings"
addopts = "--disable-pytest-warnings --reuse-db --nomigrations -s"
python_files = "*_tests.py"
testpaths = [
    "tests"
]

[tool.poetry]
name = "bk_iam_saas"
version = "0.0.0"
description = "IAM（Identity and Access Management） is centralized authority management services  provided by Blueking，which is used for centralized access of various Platforms and SaaS within the BlueKing System, and provides access control for resources that are refined to specific resource instance."
authors = ["TencentBlueKing <contactus_bk@tencent.com>"]
license = "MIT License"

[tool.poetry.dependencies]
python = "3.6.6"
# blueapps requirement
Django = "3.2.25"
pymysql = "1.0.2"
MarkupSafe = "2.0.1"
requests = "2.27.1"
celery = "5.1.2"
python-json-logger = "0.1.7"
whitenoise = "5.1.0"
six = "1.15.0"
#v2 requirement
httplib2 = "0.19.0"
# framework
djangorestframework = "3.14.0"
django-filter = "2.4.0"
django-cors-headers = "3.4.0"
Werkzeug = "1.0.1"
drf-yasg = "1.21.4"
dataclasses = "0.7"
pydantic = "1.9.2"
PyJWT = "1.7.1"
cryptography = "40.0.2"
django-prometheus = "2.2.0"
pytz = "2022.6"
aenum = "2.2.6"
# django cache
"dogpile.cache" = "0.9.2"
# preorder tree traversal
django-mptt = "0.11.0"
# profile record
pyinstrument = "3.1.3"
redis = "4.3.6"
django-redis = "5.2.0"
apigw-manager = "3.0.2"
typing-extensions = "3.7.4.3"
opentelemetry-api = "^1.7.1"
opentelemetry-sdk = "1.8.0"
opentelemetry-exporter-otlp = "^1.7.1"
opentelemetry-instrumentation-django = "0.27b0"
opentelemetry-instrumentation-dbapi = "0.27b0"
opentelemetry-instrumentation-redis = "0.27b0"
opentelemetry-instrumentation-requests = "0.27b0"
opentelemetry-instrumentation-celery = "0.27b0"
opentelemetry-instrumentation-logging = "0.27b0"
opentelemetry-exporter-jaeger = "1.7.1"
openpyxl = "^3.0.9"
sentry-sdk = "1.5.6"
django-environ = "^0.8.1"
gunicorn = "^20.1.0"
gevent = "22.10.2"
blue-krill = "1.2.6"
protobuf = "3.19.5"
bk-iam = "^1.2.2"
bk-audit = "^1.0.1-rc.0"
django-celery-beat = "2.2.1"
importlib-metadata = "4.8.3"
prometheus-client = "0.13.0"
bk-notice-sdk = "^1.1.1"
certifi = "2023.7.22"
GitPython = "3.1.18"
grpcio = "1.48.2"
Jinja2 = "3.0.3"
opentelemetry-instrumentation = "0.27b0"
opentelemetry-semantic-conventions = "0.27b0"
sqlparse = "0.4.4"
urllib3 = "1.26.18"
future = "0.18.3"
concurrent-log-handler = "0.9.25"

[tool.poetry.dev-dependencies]
# For flake8 support pyproject.toml
toml = "0.10.1"
pyproject-flake8 = "^0.0.1-alpha.2"
flake8-comprehensions = "^3.5.0"
# pytest
pytest = "6.2.2"
pytest-django = "4.1.0"
django-dynamic-fixture = "3.1.1"
converge = "0.9.8"
mock = "1.0.1"
# black
black = "21.7b0"
# mypy
mypy = "0.910"
types-requests = "^2.25.0"
types-pytz = "^2021.1.0"
types-redis = "^3.5.4"
types-six = "^0.1.7"
types-mock = "^0.1.3"
# isort
isort = "^5.9.2"
pytest-cov = "^3.0.0"
flake8-bugbear = "22.9.23"
bandit = "1.7.1"
import-linter = "1.2.6"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
